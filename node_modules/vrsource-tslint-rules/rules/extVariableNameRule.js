"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var ts = require("typescript");
var Lint = require("tslint");
var CLASS_TAG = "class";
var INTERFACE_TAG = "interface";
var PARAMETER_TAG = "parameter";
var PROPERTY_TAG = "property";
var METHOD_TAG = "method";
var FUNCTION_TAG = "function";
var VARIABLE_TAG = "variable";
var LOCAL_TAG = "local";
var STATIC_TAG = "static";
var CONST_TAG = "const";
var PUBLIC_TAG = "public";
var PROTECTED_TAG = "protected";
var PRIVATE_TAG = "private";
var VALID_VAR_TAGS = [CLASS_TAG, INTERFACE_TAG, PARAMETER_TAG,
    PROPERTY_TAG, METHOD_TAG, FUNCTION_TAG, VARIABLE_TAG,
    LOCAL_TAG, STATIC_TAG, CONST_TAG,
    PUBLIC_TAG, PROTECTED_TAG, PRIVATE_TAG];
var PASCAL_OPTION = "pascal";
var CAMEL_OPTION = "camel";
var SNAKE_OPTION = "snake";
var UPPER_OPTION = "upper";
var ALLOW_LEADING_UNDERSCORE_OPTION = "allow-leading-underscore";
var ALLOW_TRAILING_UNDERSCORE_OPTION = "allow-trailing-underscore";
var REQUIRE_LEADING_UNDERSCORE_OPTION = "require-leading-underscore";
var REQUIRE_TRAILING_UNDERSCORE_OPTION = "require-trailing-underscore";
var BAN_KEYWORDS_OPTION = "ban-keywords";
var CAMEL_FAIL = "must be in camel case";
var PASCAL_FAIL = "must be in pascal case";
var SNAKE_FAIL = "must be in snake case";
var UPPER_FAIL = "must be in uppercase";
var KEYWORD_FAIL = "name clashes with keyword/type";
var LEADING_FAIL = "name must not have leading underscore";
var TRAILING_FAIL = "name must not have trailing underscore";
var NO_LEADING_FAIL = "name must have leading underscore";
var NO_TRAILING_FAIL = "name must have trailing underscore";
var REGEX_FAIL = "name did not match required regex";
var BANNED_KEYWORDS = ["any", "Number", "number", "String", "string",
    "Boolean", "boolean", "Undefined", "undefined"];
var Rule = (function (_super) {
    __extends(Rule, _super);
    function Rule() {
        return _super.apply(this, arguments) || this;
    }
    Rule.prototype.apply = function (sourceFile) {
        var variableNameWalker = new VariableNameWalker(sourceFile, this.getOptions());
        return this.applyWithWalker(variableNameWalker);
    };
    return Rule;
}(Lint.Rules.AbstractRule));
exports.Rule = Rule;
var VariableChecker = (function () {
    function VariableChecker(opts) {
        var _this = this;
        this.caseCheck = "";
        this.allowLeadingUnderscore = false;
        this.allowTrailingUnderscore = false;
        this.requireLeadingUnderscore = false;
        this.requireTrailingUnderscore = false;
        this.banKeywords = false;
        this.regex = null;
        this.varTags = opts.filter(function (v) { return contains(VALID_VAR_TAGS, v); });
        if (contains(opts, PASCAL_OPTION)) {
            this.caseCheck = PASCAL_OPTION;
        }
        else if (contains(opts, CAMEL_OPTION)) {
            this.caseCheck = CAMEL_OPTION;
        }
        else if (contains(opts, SNAKE_OPTION)) {
            this.caseCheck = SNAKE_OPTION;
        }
        else if (contains(opts, UPPER_OPTION)) {
            this.caseCheck = UPPER_OPTION;
        }
        this.allowLeadingUnderscore = contains(opts, ALLOW_LEADING_UNDERSCORE_OPTION);
        this.allowTrailingUnderscore = contains(opts, ALLOW_TRAILING_UNDERSCORE_OPTION);
        this.requireLeadingUnderscore = contains(opts, REQUIRE_LEADING_UNDERSCORE_OPTION);
        this.requireTrailingUnderscore = contains(opts, REQUIRE_TRAILING_UNDERSCORE_OPTION);
        this.banKeywords = contains(opts, BAN_KEYWORDS_OPTION);
        opts.forEach(function (opt) {
            if (opt.regex !== undefined) {
                _this.regex = new RegExp(opt.regex);
            }
        });
    }
    VariableChecker.prototype.requiredTagsFound = function (proposedTags) {
        var matches = true;
        this.varTags.forEach(function (tag) {
            if (!contains(proposedTags, tag)) {
                matches = false;
            }
        });
        return matches;
    };
    VariableChecker.prototype.failMessage = function (failMessage, tag) {
        return tag[0].toUpperCase() + tag.substr(1) + " " + failMessage;
    };
    VariableChecker.prototype.checkName = function (name, walker, tag) {
        var variableName = name.text;
        var firstCharacter = variableName[0];
        var lastCharacter = variableName[variableName.length - 1];
        if ((this.regex !== null) && !variableName.match(this.regex)) {
            walker.addFailure(walker.createFailure(name.getStart(), name.getWidth(), this.failMessage(REGEX_FAIL, tag)));
        }
        if (this.banKeywords && contains(BANNED_KEYWORDS, variableName)) {
            walker.addFailure(walker.createFailure(name.getStart(), name.getWidth(), this.failMessage(KEYWORD_FAIL, tag)));
        }
        if ("_" === firstCharacter) {
            if (!this.allowLeadingUnderscore && !this.requireLeadingUnderscore) {
                walker.addFailure(walker.createFailure(name.getStart(), name.getWidth(), this.failMessage(LEADING_FAIL, tag)));
            }
            variableName = variableName.slice(1);
        }
        else if (this.requireLeadingUnderscore) {
            walker.addFailure(walker.createFailure(name.getStart(), name.getWidth(), this.failMessage(NO_LEADING_FAIL, tag)));
        }
        if (("_" === lastCharacter) && (variableName.length > 0)) {
            if (!this.allowTrailingUnderscore && !this.requireTrailingUnderscore) {
                walker.addFailure(walker.createFailure(name.getStart(), name.getWidth(), this.failMessage(TRAILING_FAIL, tag)));
            }
            variableName = variableName.slice(0, -1);
        }
        else if (this.requireTrailingUnderscore) {
            walker.addFailure(walker.createFailure(name.getStart(), name.getWidth(), this.failMessage(NO_TRAILING_FAIL, tag)));
        }
        if ((PASCAL_OPTION === this.caseCheck) && !isPascalCased(variableName)) {
            walker.addFailure(walker.createFailure(name.getStart(), name.getWidth(), this.failMessage(PASCAL_FAIL, tag)));
        }
        else if ((CAMEL_OPTION === this.caseCheck) && !isCamelCase(variableName)) {
            walker.addFailure(walker.createFailure(name.getStart(), name.getWidth(), this.failMessage(CAMEL_FAIL, tag)));
        }
        else if ((SNAKE_OPTION === this.caseCheck) && !isSnakeCase(variableName)) {
            walker.addFailure(walker.createFailure(name.getStart(), name.getWidth(), this.failMessage(SNAKE_FAIL, tag)));
        }
        else if ((UPPER_OPTION === this.caseCheck) && !isUpperCase(variableName)) {
            walker.addFailure(walker.createFailure(name.getStart(), name.getWidth(), this.failMessage(UPPER_FAIL, tag)));
        }
    };
    return VariableChecker;
}());
var VariableNameWalker = (function (_super) {
    __extends(VariableNameWalker, _super);
    function VariableNameWalker(sourceFile, options) {
        var _this = _super.call(this, sourceFile, options) || this;
        _this.checkers = [];
        var sub_rules = options.ruleArguments;
        sub_rules.forEach(function (rule_opts) {
            _this.checkers.push(new VariableChecker(rule_opts));
        });
        return _this;
    }
    VariableNameWalker.prototype.visitClassDeclaration = function (node) {
        this.checkName(node, CLASS_TAG);
        _super.prototype.visitClassDeclaration.call(this, node);
    };
    VariableNameWalker.prototype.visitMethodDeclaration = function (node) {
        this.checkName(node, METHOD_TAG);
        _super.prototype.visitMethodDeclaration.call(this, node);
    };
    VariableNameWalker.prototype.visitInterfaceDeclaration = function (node) {
        this.checkName(node, INTERFACE_TAG);
        _super.prototype.visitInterfaceDeclaration.call(this, node);
    };
    VariableNameWalker.prototype.visitBindingElement = function (node) {
        this.checkName(node, VARIABLE_TAG);
        _super.prototype.visitBindingElement.call(this, node);
    };
    VariableNameWalker.prototype.visitParameterDeclaration = function (node) {
        var parameterProperty = Lint.hasModifier(node.modifiers, ts.SyntaxKind.PublicKeyword) ||
            Lint.hasModifier(node.modifiers, ts.SyntaxKind.ProtectedKeyword) ||
            Lint.hasModifier(node.modifiers, ts.SyntaxKind.PrivateKeyword);
        this.checkName(node, parameterProperty ? PROPERTY_TAG : PARAMETER_TAG);
        _super.prototype.visitParameterDeclaration.call(this, node);
    };
    VariableNameWalker.prototype.visitPropertyDeclaration = function (node) {
        this.checkName(node, PROPERTY_TAG);
        _super.prototype.visitPropertyDeclaration.call(this, node);
    };
    VariableNameWalker.prototype.visitSetAccessor = function (node) {
        this.checkName(node, PROPERTY_TAG);
        _super.prototype.visitSetAccessor.call(this, node);
    };
    VariableNameWalker.prototype.visitGetAccessor = function (node) {
        this.checkName(node, PROPERTY_TAG);
        _super.prototype.visitGetAccessor.call(this, node);
    };
    VariableNameWalker.prototype.visitVariableDeclaration = function (node) {
        this.checkName(node, VARIABLE_TAG);
        _super.prototype.visitVariableDeclaration.call(this, node);
    };
    VariableNameWalker.prototype.visitVariableStatement = function (node) {
        if (!Lint.hasModifier(node.modifiers, ts.SyntaxKind.DeclareKeyword)) {
            _super.prototype.visitVariableStatement.call(this, node);
        }
    };
    VariableNameWalker.prototype.visitFunctionDeclaration = function (node) {
        this.checkName(node, FUNCTION_TAG);
        _super.prototype.visitFunctionDeclaration.call(this, node);
    };
    VariableNameWalker.prototype.checkName = function (node, tag) {
        if (node.name.kind === ts.SyntaxKind.Identifier) {
            var matching_checker = this.getMatchingChecker(this.getNodeTags(node, tag));
            if (matching_checker !== null) {
                matching_checker.checkName(node.name, this, tag);
            }
        }
    };
    VariableNameWalker.prototype.getMatchingChecker = function (varTags) {
        var matching_checkers = this.checkers.filter(function (checker) { return checker.requiredTagsFound(varTags); });
        if (matching_checkers.length > 0) {
            return matching_checkers[0];
        }
        else {
            return null;
        }
    };
    VariableNameWalker.prototype.getNodeTags = function (node, primaryTag) {
        var tags = [primaryTag];
        if (Lint.hasModifier(node.modifiers, ts.SyntaxKind.StaticKeyword)) {
            tags.push(STATIC_TAG);
        }
        if (Lint.hasModifier(node.modifiers, ts.SyntaxKind.ConstKeyword)) {
            tags.push(CONST_TAG);
        }
        if (primaryTag === PROPERTY_TAG || primaryTag === METHOD_TAG) {
            if (Lint.hasModifier(node.modifiers, ts.SyntaxKind.PrivateKeyword)) {
                tags.push(PRIVATE_TAG);
            }
            else if (Lint.hasModifier(node.modifiers, ts.SyntaxKind.ProtectedKeyword)) {
                tags.push(PROTECTED_TAG);
            }
            else {
                tags.push(PUBLIC_TAG);
            }
        }
        var nearest_body = nearestBody(node);
        if (!nearest_body.isSourceFile) {
            tags.push(LOCAL_TAG);
        }
        if (node.kind === ts.SyntaxKind.VariableDeclaration) {
            if (isConstVariable(node)) {
                tags.push(CONST_TAG);
            }
        }
        return tags;
    };
    return VariableNameWalker;
}(Lint.RuleWalker));
function nearestBody(node) {
    var VALID_PARENT_TYPES = [
        ts.SyntaxKind.SourceFile,
        ts.SyntaxKind.FunctionDeclaration,
        ts.SyntaxKind.FunctionExpression,
        ts.SyntaxKind.ArrowFunction,
        ts.SyntaxKind.MethodDeclaration,
        ts.SyntaxKind.Constructor,
    ];
    var ancestor = node.parent;
    while (ancestor && !contains(VALID_PARENT_TYPES, ancestor.kind)) {
        ancestor = ancestor.parent;
    }
    return {
        containingBody: ancestor,
        isSourceFile: (ancestor && ancestor.kind === ts.SyntaxKind.SourceFile) || !ancestor,
    };
}
function isConstVariable(node) {
    var parentNode = (node.kind === ts.SyntaxKind.VariableDeclaration)
        ? node.parent
        : node.declarationList;
    return Lint.isNodeFlagSet(parentNode, ts.NodeFlags.Const);
}
function isPascalCased(name) {
    if (name.length <= 0) {
        return true;
    }
    var firstCharacter = name.charAt(0);
    return ((firstCharacter === firstCharacter.toUpperCase()) && name.indexOf("_") === -1);
}
function isCamelCase(name) {
    var firstCharacter = name.charAt(0);
    if (name.length <= 0) {
        return true;
    }
    if (!isLowerCase(firstCharacter)) {
        return false;
    }
    return name.indexOf("_") === -1;
}
function isSnakeCase(name) {
    return isLowerCase(name);
}
function isLowerCase(name) {
    return name === name.toLowerCase();
}
function isUpperCase(name) {
    return name === name.toUpperCase();
}
function contains(arr, value) {
    return arr.indexOf(value) !== -1;
}
//# sourceMappingURL=data:application/json;base64,