"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var fs_1 = require("fs");
var mkdirp_1 = require("mkdirp");
var path_1 = require("path");
var uuid_1 = require("uuid");
var properties_1 = require("properties");
var ContentType_1 = require("./entities/ContentType");
var AllureGroup_1 = require("./AllureGroup");
var AllureRuntime = /** @class */ (function () {
    function AllureRuntime(config) {
        this.config = config;
        if (!fs_1.existsSync(this.config.resultsDir))
            mkdirp_1.sync(this.config.resultsDir);
    }
    AllureRuntime.prototype.startGroup = function (name) {
        var allureContainer = new AllureGroup_1.AllureGroup(this);
        allureContainer.name = name || "Unnamed";
        return allureContainer;
    };
    AllureRuntime.prototype.writeResult = function (result) {
        var modifiedResult = this.config.testMapper !== undefined ? this.config.testMapper(result) : result;
        if (modifiedResult != null) {
            var path = path_1.join(this.config.resultsDir, modifiedResult.uuid + "-result.json");
            fs_1.writeFileSync(path, JSON.stringify(modifiedResult), { encoding: "utf-8" });
        }
    };
    AllureRuntime.prototype.writeGroup = function (result) {
        var path = path_1.join(this.config.resultsDir, result.uuid + "-container.json");
        fs_1.writeFileSync(path, JSON.stringify(result), { encoding: "utf-8" });
    };
    AllureRuntime.prototype.writeAttachment = function (content, contentType) {
        var extension = ContentType_1.typeToExtension(contentType);
        var fileName = uuid_1.v4() + "-attachment." + extension;
        var path = path_1.join(this.config.resultsDir, fileName);
        fs_1.writeFileSync(path, content, { encoding: "utf-8" });
        return fileName;
    };
    AllureRuntime.prototype.writeExecutorInfo = function (info) {
        var path = path_1.join(this.config.resultsDir, "executor.json");
        fs_1.writeFileSync(path, JSON.stringify(info), { encoding: "utf-8" });
    };
    AllureRuntime.prototype.writeEnvironmentInfo = function (info) {
        var path = path_1.join(this.config.resultsDir, "environment.properties");
        var target = info || process.env;
        var text = properties_1.stringify(target, { unicode: true });
        fs_1.writeFileSync(path, text, { encoding: "utf-8" });
    };
    AllureRuntime.prototype.writeCategories = function (categories) {
        var path = path_1.join(this.config.resultsDir, "categories.json");
        fs_1.writeFileSync(path, JSON.stringify(categories.map(function (c) {
            if (c.messageRegex instanceof RegExp)
                c.messageRegex = c.messageRegex.source;
            if (c.traceRegex instanceof RegExp)
                c.traceRegex = c.traceRegex.source;
            return c;
        })), { encoding: "utf-8" });
    };
    return AllureRuntime;
}());
exports.AllureRuntime = AllureRuntime;
//# sourceMappingURL=AllureRuntime.js.map