"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ExecutableItemWrapper_1 = require("./ExecutableItemWrapper");
var TestResult_1 = require("./entities/TestResult");
var Label_1 = require("./entities/Label");
var Link_1 = require("./entities/Link");
var AllureTest = /** @class */ (function (_super) {
    __extends(AllureTest, _super);
    function AllureTest(runtime, parent) {
        var _this = _super.call(this, new TestResult_1.TestResult()) || this;
        _this.runtime = runtime;
        _this.parent = parent;
        _this.testResult = _this.wrappedItem;
        _this.testResult.start = Date.now();
        return _this;
    }
    AllureTest.prototype.endTest = function () {
        this.testResult.stop = Date.now();
        this.runtime.writeResult(this.testResult);
        // TODO: test that child steps ended
    };
    Object.defineProperty(AllureTest.prototype, "uuid", {
        get: function () {
            return this.testResult.uuid;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AllureTest.prototype, "historyId", {
        set: function (id) {
            this.testResult.historyId = id;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AllureTest.prototype, "fullName", {
        set: function (fullName) {
            this.testResult.fullName = fullName;
        },
        enumerable: true,
        configurable: true
    });
    AllureTest.prototype.addLabel = function (name, value) {
        this.testResult.labels.push(new Label_1.Label(name, value));
    };
    AllureTest.prototype.addLink = function (name, url, type) {
        this.testResult.links.push(new Link_1.Link(name, url, type));
    };
    return AllureTest;
}(ExecutableItemWrapper_1.ExecutableItemWrapper));
exports.AllureTest = AllureTest;
//# sourceMappingURL=AllureTest.js.map