/// <reference types="node" />
import { Severity } from "./entities/Severity";
import { ContentType } from "./entities/ContentType";
import { GlobalInfoWriter } from "./GlobalInfoWriter";
export declare abstract class AllureInterface {
    abstract setDescription(text: string): void;
    abstract setFlaky(): void;
    abstract setKnown(): void;
    abstract setMuted(): void;
    abstract addOwner(owner: string): void;
    abstract setSeverity(severity: Severity): void;
    abstract addIssue(issue: string): void;
    abstract addTag(tag: string): void;
    abstract addTestType(type: string): void;
    abstract addLink(name: string, url: string, type?: string): void;
    abstract step<T>(name: string, body: () => any): any;
    abstract attachment(name: string, content: Buffer | string, type: ContentType): void;
    abstract addParameter(name: string, value: string): void;
    abstract getGlobalInfoWriter(): GlobalInfoWriter;
    /**
     * @deprecated Use step function
     */
    createStep(name: string, stepFunction: Function): (...args: any[]) => any;
    /**
     * @deprecated Use attachment function
     */
    createAttachment(name: string, content: Buffer | string | Function, type: ContentType): ((...args: any[]) => void) | undefined;
    /**
     * @deprecated
     */
    abstract addLabel(name: string, value: string): void;
    /**
     * @deprecated
     */
    addArgument(name: string, value: string): void;
    /**
     * @deprecated
     */
    addEnvironment(name: string, value: string): void;
    /**
     * @deprecated use setDescription
     */
    description(description: string, type: string): void;
    /**
     * @deprecated use setSeverity
     */
    severity(severity: string): void;
    /**
     * @deprecated
     */
    epic(epic: string): void;
    /**
     * @deprecated
     */
    feature(feature: string): void;
    /**
     * @deprecated
     */
    story(story: string): void;
}
