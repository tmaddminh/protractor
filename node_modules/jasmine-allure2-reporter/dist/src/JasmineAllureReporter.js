"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable no-undef */
var allure2_js_commons_1 = require("allure2-js-commons");
var SpecStatus;
(function (SpecStatus) {
    SpecStatus["PASSED"] = "passed";
    SpecStatus["FAILED"] = "failed";
    SpecStatus["BROKEN"] = "broken";
    SpecStatus["PENDING"] = "pending";
    SpecStatus["DISABLED"] = "disabled";
    SpecStatus["EXCLUDED"] = "excluded";
})(SpecStatus || (SpecStatus = {}));
var JasmineAllureReporter = /** @class */ (function () {
    function JasmineAllureReporter(runtime) {
        this.runtime = runtime;
        this.groupStack = [];
        this.runningTest = null;
        this.stepStack = [];
        this.runningExecutable = null;
        this.installHooks();
    }
    JasmineAllureReporter.prototype.getCurrentGroup = function () {
        if (this.groupStack.length === 0)
            return null;
        return this.groupStack[this.groupStack.length - 1];
    };
    Object.defineProperty(JasmineAllureReporter.prototype, "currentGroup", {
        get: function () {
            var currentGroup = this.getCurrentGroup();
            if (currentGroup === null)
                throw new Error("No active group");
            return currentGroup;
        },
        enumerable: true,
        configurable: true
    });
    JasmineAllureReporter.prototype.getInterface = function () {
        return new JasmineAllureInterface(this);
    };
    JasmineAllureReporter.prototype.getGlobalInfoWriter = function () {
        return this.runtime;
    };
    Object.defineProperty(JasmineAllureReporter.prototype, "currentTest", {
        get: function () {
            if (this.runningTest === null)
                throw new Error("No active test");
            return this.runningTest;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(JasmineAllureReporter.prototype, "currentExecutable", {
        get: function () {
            //if (this.runningExecutable === null) throw new Error("No active executable");
            return this.runningExecutable;
        },
        enumerable: true,
        configurable: true
    });
    JasmineAllureReporter.prototype.writeAttachment = function (content, type) {
        return this.runtime.writeAttachment(content, type);
    };
    JasmineAllureReporter.prototype.jasmineStarted = function (suiteInfo) {
    };
    JasmineAllureReporter.prototype.suiteStarted = function (suite) {
        var name = suite.description;
        var group = (this.getCurrentGroup() || this.runtime).startGroup(name);
        this.groupStack.push(group);
    };
    JasmineAllureReporter.prototype.specStarted = function (spec) {
        var currentGroup = this.getCurrentGroup();
        if (currentGroup === null)
            throw new Error("No active suite");
        currentGroup = currentGroup.startGroup("Test wrapper"); // needed to hold beforeEach/AfterEach
        this.groupStack.push(currentGroup);
        var name = spec.description;
        var allureTest = currentGroup.startTest(name);
        if (this.runningTest != null)
            throw new Error("Test is starting before other ended!");
        this.runningTest = allureTest;
        allureTest.fullName = spec.fullName;
        allureTest.historyId = spec.fullName;
        allureTest.stage = allure2_js_commons_1.Stage.RUNNING;
        // ignore wrapper, index + 1
        if (this.groupStack.length > 1)
            allureTest.addLabel(allure2_js_commons_1.LabelName.PARENT_SUITE, this.groupStack[0].name);
        if (this.groupStack.length > 2)
            allureTest.addLabel(allure2_js_commons_1.LabelName.SUITE, this.groupStack[1].name);
        if (this.groupStack.length > 3)
            allureTest.addLabel(allure2_js_commons_1.LabelName.SUB_SUITE, this.groupStack[2].name);
        // TODO: if more depth add something to test name
    };
    JasmineAllureReporter.prototype.specDone = function (spec) {
        var currentTest = this.runningTest;
        if (currentTest === null)
            throw new Error("specDone while no test is running");
        if (this.stepStack.length > 0) {
            console.error("Allure reporter issue: step stack is not empty on specDone");
            for (var _i = 0, _a = this.stepStack.reverse(); _i < _a.length; _i++) {
                var step = _a[_i];
                step.status = allure2_js_commons_1.Status.BROKEN;
                step.stage = allure2_js_commons_1.Stage.INTERRUPTED;
                step.detailsMessage = "Timeout";
                step.endStep();
            }
            this.stepStack = [];
        }
        if (spec.status === SpecStatus.PENDING || spec.status === SpecStatus.DISABLED || spec.status === SpecStatus.EXCLUDED) {
            currentTest.status = allure2_js_commons_1.Status.SKIPPED;
            currentTest.stage = allure2_js_commons_1.Stage.PENDING;
            currentTest.detailsMessage = spec.pendingReason || "Suite disabled";
        }
        currentTest.stage = allure2_js_commons_1.Stage.FINISHED;
        if (spec.status === SpecStatus.PASSED) {
            currentTest.status = allure2_js_commons_1.Status.PASSED;
        }
        if (spec.status === SpecStatus.BROKEN) {
            currentTest.status = allure2_js_commons_1.Status.BROKEN;
        }
        if (spec.status === SpecStatus.FAILED) {
            currentTest.status = allure2_js_commons_1.Status.FAILED;
        }
        var exceptionInfo = this.findMessageAboutThrow(spec.failedExpectations) || this.findAnyError(spec.failedExpectations);
        if (exceptionInfo !== null) {
            currentTest.detailsMessage = exceptionInfo.message;
            currentTest.detailsTrace = exceptionInfo.stack;
        }
        currentTest.endTest();
        this.runningTest = null;
        this.currentGroup.endGroup(); // popping the test wrapper
        this.groupStack.pop();
    };
    JasmineAllureReporter.prototype.suiteDone = function (suite) {
        if (this.runningTest !== null) {
            console.error("Allure reporter issue: running test on suiteDone");
        }
        var currentGroup = this.getCurrentGroup();
        if (currentGroup === null)
            throw new Error("No active suite");
        currentGroup.endGroup();
        this.groupStack.pop();
    };
    JasmineAllureReporter.prototype.jasmineDone = function (runDetails) {
    };
    JasmineAllureReporter.prototype.findMessageAboutThrow = function (expectations) {
        for (var _i = 0, _a = expectations || []; _i < _a.length; _i++) {
            var e = _a[_i];
            if (e.matcherName === "")
                return e;
        }
        return null;
    };
    JasmineAllureReporter.prototype.findAnyError = function (expectations) {
        expectations = expectations || [];
        if (expectations.length > 0)
            return expectations[0];
        return null;
    };
    JasmineAllureReporter.prototype.pushStep = function (step) {
        this.stepStack.push(step);
    };
    JasmineAllureReporter.prototype.popStep = function () {
        this.stepStack.pop();
    };
    Object.defineProperty(JasmineAllureReporter.prototype, "currentStep", {
        get: function () {
            if (this.stepStack.length > 0)
                return this.stepStack[this.stepStack.length - 1];
            return null;
        },
        enumerable: true,
        configurable: true
    });
    JasmineAllureReporter.prototype.installHooks = function () {
        var reporter = this;
        var jasmineBeforeAll = eval("global.beforeAll");
        var jasmineAfterAll = eval("global.afterAll");
        var jasmineBeforeEach = eval("global.beforeEach");
        var jasmineAfterEach = eval("global.afterEach");
        function makeWrapperAll(wrapped, fun) {
            return function (action, timeout) {
                wrapped(function (done) {
                    reporter.runningExecutable = fun();
                    var ret;
                    if (action.length > 0) { // function takes done callback
                        ret = reporter.runningExecutable.wrap(function () { return new Promise(function (resolve, reject) {
                            var t = resolve;
                            t.fail = reject;
                            action(t);
                        }); })();
                    }
                    else {
                        ret = reporter.runningExecutable.wrap(action)();
                    }
                    if (allure2_js_commons_1.isPromise(ret)) {
                        ret.then(function () {
                            reporter.runningExecutable = null;
                            done();
                        }).catch(function (e) {
                            reporter.runningExecutable = null;
                            done.fail(e);
                        });
                    }
                    else {
                        reporter.runningExecutable = null;
                        done();
                    }
                }, timeout);
            };
        }
        var wrapperBeforeAll = makeWrapperAll(jasmineBeforeAll, function () { return reporter.currentGroup.addBefore(); });
        var wrapperAfterAll = makeWrapperAll(jasmineAfterAll, function () { return reporter.currentGroup.addAfter(); });
        var wrapperBeforeEach = makeWrapperAll(jasmineBeforeEach, function () { return reporter.currentGroup.addBefore(); });
        var wrapperAfterEach = makeWrapperAll(jasmineAfterEach, function () { return reporter.currentGroup.addAfter(); });
        eval("global.beforeAll = wrapperBeforeAll;");
        eval("global.afterAll = wrapperAfterAll;");
        eval("global.beforeEach = wrapperBeforeEach;");
        eval("global.afterEach = wrapperAfterEach;");
    };
    return JasmineAllureReporter;
}());
exports.JasmineAllureReporter = JasmineAllureReporter;
var JasmineAllureInterface = /** @class */ (function (_super) {
    __extends(JasmineAllureInterface, _super);
    function JasmineAllureInterface(reporter) {
        var _this = _super.call(this) || this;
        _this.reporter = reporter;
        return _this;
    }
    Object.defineProperty(JasmineAllureInterface.prototype, "currentExecutable", {
        get: function () {
            return this.reporter.currentStep || this.reporter.currentExecutable || this.reporter.currentTest;
        },
        enumerable: true,
        configurable: true
    });
    JasmineAllureInterface.prototype.setDescription = function (text) {
        this.currentExecutable.description = text;
        this.currentExecutable.descriptionHtml = text;
    };
    JasmineAllureInterface.prototype.setFlaky = function () {
        this.currentExecutable.detailsFlaky = true;
    };
    JasmineAllureInterface.prototype.setKnown = function () {
        this.currentExecutable.detailsKnown = true;
    };
    JasmineAllureInterface.prototype.setMuted = function () {
        this.currentExecutable.detailsMuted = true;
    };
    JasmineAllureInterface.prototype.addOwner = function (owner) {
        if (this.reporter.currentTest === null)
            throw new Error("No test running!");
        this.reporter.currentTest.addLabel(allure2_js_commons_1.LabelName.OWNER, owner);
    };
    JasmineAllureInterface.prototype.setSeverity = function (severity) {
        if (this.reporter.currentTest === null)
            throw new Error("No test running!");
        this.reporter.currentTest.addLabel(allure2_js_commons_1.LabelName.SEVERITY, severity);
    };
    JasmineAllureInterface.prototype.addIssue = function (issue) {
        if (this.reporter.currentTest === null)
            throw new Error("No test running!");
        this.reporter.currentTest.addLabel(allure2_js_commons_1.LabelName.ISSUE, issue);
    };
    JasmineAllureInterface.prototype.addTag = function (tag) {
        if (this.reporter.currentTest === null)
            throw new Error("No test running!");
        this.reporter.currentTest.addLabel(allure2_js_commons_1.LabelName.TAG, tag);
    };
    JasmineAllureInterface.prototype.addTestType = function (type) {
        if (this.reporter.currentTest === null)
            throw new Error("No test running!");
        this.reporter.currentTest.addLabel(allure2_js_commons_1.LabelName.TEST_TYPE, type);
    };
    JasmineAllureInterface.prototype.addLink = function (name, url, type) {
        if (this.reporter.currentTest === null)
            throw new Error("No test running!");
        this.reporter.currentTest.addLink(name, url, type);
    };
    JasmineAllureInterface.prototype.startStep = function (name) {
        var allureStep = this.currentExecutable.startStep(name);
        this.reporter.pushStep(allureStep);
        return new WrappedStep(this.reporter, allureStep);
    };
    JasmineAllureInterface.prototype.step = function (name, body) {
        var wrappedStep = this.startStep(name);
        var result;
        try {
            result = wrappedStep.run(body);
        }
        catch (err) {
            wrappedStep.endStep();
            throw err;
        }
        if (allure2_js_commons_1.isPromise(result)) {
            var promise = result;
            return promise.then(function (a) {
                wrappedStep.endStep();
                return a;
            }).catch(function (e) {
                wrappedStep.endStep();
                throw e;
            });
        }
        else {
            wrappedStep.endStep();
            return result;
        }
    };
    JasmineAllureInterface.prototype.attachment = function (name, content, type) {
        var file = this.reporter.writeAttachment(content, type);
        this.currentExecutable.addAttachment(name, type, file);
    };
    JasmineAllureInterface.prototype.addParameter = function (name, value) {
        if (this.reporter.currentTest === null)
            throw new Error("No test running!");
        this.reporter.currentTest.addParameter(name, value);
    };
    JasmineAllureInterface.prototype.addLabel = function (name, value) {
        if (this.reporter.currentTest === null)
            throw new Error("No test running!");
        this.reporter.currentTest.addLabel(name, value);
    };
    JasmineAllureInterface.prototype.getGlobalInfoWriter = function () {
        return this.reporter.getGlobalInfoWriter();
    };
    return JasmineAllureInterface;
}(allure2_js_commons_1.AllureInterface));
exports.JasmineAllureInterface = JasmineAllureInterface;
var WrappedStep = /** @class */ (function () {
    function WrappedStep(reporter, step) {
        this.reporter = reporter;
        this.step = step;
    }
    WrappedStep.prototype.startStep = function (name) {
        var step = this.step.startStep(name);
        this.reporter.pushStep(step);
        return new WrappedStep(this.reporter, step);
    };
    WrappedStep.prototype.endStep = function () {
        this.reporter.popStep();
        this.step.endStep();
    };
    WrappedStep.prototype.run = function (body) {
        return this.step.wrap(body)();
    };
    return WrappedStep;
}());
//# sourceMappingURL=JasmineAllureReporter.js.map