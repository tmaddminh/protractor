/// <reference types="node" />
/// <reference types="jasmine" />
import { AllureGroup, AllureRuntime, AllureStep, AllureTest, ContentType, ExecutableItemWrapper, Severity, AllureInterface, GlobalInfoWriter } from "allure2-js-commons";
export declare class JasmineAllureReporter implements jasmine.CustomReporter {
    private readonly runtime;
    private groupStack;
    private runningTest;
    private stepStack;
    private runningExecutable;
    constructor(runtime: AllureRuntime);
    private getCurrentGroup;
    readonly currentGroup: AllureGroup;
    getInterface(): AllureInterface;
    getGlobalInfoWriter(): GlobalInfoWriter;
    readonly currentTest: AllureTest;
    readonly currentExecutable: ExecutableItemWrapper | null;
    writeAttachment(content: Buffer | string, type: ContentType): string;
    jasmineStarted(suiteInfo: jasmine.SuiteInfo): void;
    suiteStarted(suite: jasmine.CustomReporterResult): void;
    specStarted(spec: jasmine.CustomReporterResult): void;
    specDone(spec: jasmine.CustomReporterResult): void;
    suiteDone(suite: jasmine.CustomReporterResult): void;
    jasmineDone(runDetails: jasmine.RunDetails): void;
    private findMessageAboutThrow;
    private findAnyError;
    pushStep(step: AllureStep): void;
    popStep(): void;
    readonly currentStep: AllureStep | null;
    private installHooks;
}
export declare class JasmineAllureInterface extends AllureInterface {
    private readonly reporter;
    constructor(reporter: JasmineAllureReporter);
    private readonly currentExecutable;
    setDescription(text: string): void;
    setFlaky(): void;
    setKnown(): void;
    setMuted(): void;
    addOwner(owner: string): void;
    setSeverity(severity: Severity): void;
    addIssue(issue: string): void;
    addTag(tag: string): void;
    addTestType(type: string): void;
    addLink(name: string, url: string, type?: string): void;
    private startStep;
    step<T>(name: string, body: () => any): any;
    attachment(name: string, content: Buffer | string, type: ContentType): void;
    addParameter(name: string, value: string): void;
    addLabel(name: string, value: string): void;
    getGlobalInfoWriter(): GlobalInfoWriter;
}
